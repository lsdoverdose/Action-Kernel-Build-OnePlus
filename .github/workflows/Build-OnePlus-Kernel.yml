name: Universal OnePlus Kernel Workflow

on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "CPU型号"
        required: true
        type: choice
        options:
          - 'sm8650'
          - 'sm8550'
          - 'sm8450'
          - 'sm8475'
          - 'sm7675'
          - 'sm7550'
          - 'sm6375'
        default: 'sm8650'

      MODEL:
        description: "选择机型"
        required: true
        type: choice
        options:
          - 'oneplus_12'
          - 'oneplus_ace5'
          - 'oneplus_13r'
          - 'oneplus_12r'
          - 'oneplus_ace3'
          - 'oneplus_ace3_pro' 
        default: 'oneplus_ace5'
        
      PLATFORM:
        description: "平台代号"
        required: true
        type: choice
        options:
          - 'pineapple'
          - 'kalama'
          - 'waipio'
          - 'crow'
        default: 'pineapple'
        
      KERNEL_VERSION:
        description: "内核版本"
        required: true
        type: choice
        options:
          - '6.6'
          - '6.1'
          - '5.15'
          - '5.10'
        default: '6.1'
        
      BUILD_TYPE:
        description: "编译类型"
        required: true
        type: choice
        options:
          - 'gki'
          - 'perf'
        default: 'gki'

      SU_SOLUTION:
        description: "选择SU方案"
        required: true
        type: choice
        options:
          - 'None'
          - 'KernelSU'
          - 'KernelSU_Next'
        default: 'KernelSU'
        
      SU_VERSION:
        description: "SU版本"
        required: true
        type: choice
        options:
          - 'tag'
          - 'main'
          - 'custom'
        default: 'main'
        
      SUSFS_ENABLED:
        description: "启用SUSFS"
        required: true
        type: boolean
        default: false
        
      KPM_ENABLED:
        description: "启用KPM"
        required: true
        type: boolean
        default: false
        
      LZ4KD_ENABLED:
        description: "启用LZ4KD压缩"
        required: true
        type: boolean
        default: false


jobs:
  build:
    name: Build for ${{ github.event.inputs.FEIL }} (${{ github.event.inputs.SU_SOLUTION }})
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_MAXSIZE: 8G
      
    steps:
      # ====================== 初始化阶段 ======================
      - name: "🚀 Maximize Build Space | 最大化构建空间"
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 24576
          temp-reserve-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: "⚙️ Setup Cache Env | 设置缓存环境"
        run: |
          echo "🔧 正在设置机型隔离缓存目录..."
          echo "CCACHE_DIR=$HOME/.ccache_${{ github.event.inputs.FEIL }}" >> $GITHUB_ENV
          mkdir -p "$HOME/.ccache_${{ github.event.inputs.FEIL }}"
          echo "✅ 缓存目录已设置: $HOME/.ccache_${{ github.event.inputs.FEIL }}"

      - name: "🔐 Configure Git | 配置Git账户"
        run: |
          echo "🔧 正在配置Git用户信息..."
          git config --global user.name "Action Builder"
          git config --global user.email "lsdoverdose@proton.me"
          echo "✅ Git配置完成"

      # ====================== 依赖安装阶段 ======================
      - name: "📦 Install Dependencies | 安装构建依赖"
        run: |
          echo "🔧 正在安装编译依赖项..."
          sudo apt update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt install -yq --no-install-recommends \
            python3 git curl ccache libelf-dev \
            build-essential flex bison libssl-dev \
            libncurses-dev liblz4-tool zlib1g-dev \
            libxml2-utils rsync unzip bc kmod cpio jq
          echo "✅ 所有依赖项已成功安装"

      - name: "📥 Install Repo Tool | 安装Repo工具"
        run: |
          echo "⬇️ 正在下载repo工具..."
          curl -fsSL https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo
          echo "✅ repo工具安装完成"

      # ====================== 源码准备阶段 ======================
      - name: "⬇️ Clone Kernel Source | 克隆内核源码"
        run: |
          echo "🌐 正在初始化内核仓库..."
          mkdir kernel_workspace && cd kernel_workspace
          
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
          echo "🔄 同步代码库(使用$(nproc --all)线程)..."
          repo sync -c -j$(nproc --all) --no-tags --no-clone-bundle --force-sync
          
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
          
          echo "✏️ 修改版本字符串设置..."
          sed -i 's/ -dirty//g' kernel_platform/common/scripts/setlocalversion
          sed -i 's/ -dirty//g' kernel_platform/msm-kernel/scripts/setlocalversion
          sed -i 's/ -dirty//g' kernel_platform/external/dtc/scripts/setlocalversion
          sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' kernel_platform/common/scripts/setlocalversion
          sed -i '$s|echo "\$res"|echo "${{ github.event.inputs.KERNEL_NAME_SUFFIX }}"|' kernel_platform/common/scripts/setlocalversion
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" kernel_platform/build/kernel/kleaf/impl/stamp.bzl
          sed -i 's|build-timestamp = $(or $(KBUILD_BUILD_TIMESTAMP), $(build-timestamp-auto))|build-timestamp = "Wed Mar 12 08:35:37 UTC 2025"|' kernel_platform/common/init/Makefile
          echo "✅ 内核源码准备完成"

      # ====================== SU方案配置阶段 ======================
      - name: "⚡ Setup SU Solution | 配置SU方案"
        if: ${{ github.event.inputs.SU_SOLUTION != 'None' }}
        run: |
          echo "🛠️ 正在设置${{ github.event.inputs.SU_SOLUTION }}..."
          cd kernel_workspace/kernel_platform
          
          # 根据选择的SU方案下载对应的设置脚本
          case "${{ github.event.inputs.SU_SOLUTION }}" in
            "KernelSU")
              curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s ${{ github.event.inputs.SU_VERSION == 'main' && 'main' || '' }}
              ;;
            "KernelSU_Next")
              curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s ${{ github.event.inputs.SU_VERSION == 'main' && 'next' || '' }}
              ;;
            "MKSU")
              curl -LSs "https://raw.githubusercontent.com/5ec1cff/KernelSU/main/kernel/setup.sh" | bash -s ${{ github.event.inputs.SU_VERSION == 'main' && 'main' || '' }}
              ;;
            "RKSU")
              curl -LSs "https://raw.githubusercontent.com/rsuntk/KernelSU/main/kernel/setup.sh" | bash -s susfs-v1.5.5
              ;;
            "SKSU")
              curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-dev
              ;;
          esac
          
          # 设置SU版本号
          cd KernelSU${{ contains(github.event.inputs.SU_SOLUTION, 'Next') && '-Next' || '' }}
          if [[ "${{ github.event.inputs.SU_VERSION }}" == "custom" ]]; then
            KSU_VERSION=${{ github.event.inputs.SU_CUSTOM_VERSION }}
          else
            KSU_VERSION=$(expr $(git rev-list --count HEAD) + 10200)
          fi
          
          sed -i "s/DKSU_VERSION=.*/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
          echo "KSUVER=${KSU_VERSION}" >> $GITHUB_ENV
          echo "✅ ${{ github.event.inputs.SU_SOLUTION }}配置完成，版本号: ${KSU_VERSION}"

      # ====================== SUSFS配置阶段 ======================
      - name: "🔧 Set up SUSFS | 配置SUSFS"
        if: ${{ github.event.inputs.SUSFS_ENABLED && github.event.inputs.SU_SOLUTION != 'None' }}
        run: |
          cd kernel_workspace
          echo "⬇️ 下载SUSFS补丁..."
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
          git clone https://github.com/WildPlusKernel/kernel_patches.git
          
          cd kernel_platform
          echo "📝 复制补丁文件..."
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          # 根据SU方案应用不同的补丁
          case "${{ github.event.inputs.SU_SOLUTION }}" in
            "KernelSU"|"MKSU"|"RKSU")
              cp ../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./KernelSU/
              cd ./KernelSU
              patch -p1 < 10_enable_susfs_for_ksu.patch || true
              ;;
            "KernelSU_Next")
              cp ../kernel_patches/next/0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch ./KernelSU-Next/
              cd ./KernelSU-Next
              patch -p1 < 0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch || true
              ;;
            "SKSU")
              # SKSU已经内置SUSFS支持
              cd ./KernelSU
              ;;
          esac
          
          cd ../common
          patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch || true
          cp ../../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch
          
          # 应用系统调用钩子补丁
          if [[ "${{ github.event.inputs.SU_SOLUTION }}" == "KernelSU_Next" ]]; then
            cp ../../kernel_patches/next/syscall_hooks.patch ./
            patch -p1 -F 3 < syscall_hooks.patch
          elif [[ "${{ github.event.inputs.SU_SOLUTION }}" =~ "SKSU|MKSU" ]]; then
            cp ../../kernel_patches/hooks/new_hooks.patch ./
            patch -p1 -F 3 < new_hooks.patch
          fi
          
          echo "✅ SUSFS配置完成"

      # ====================== 内核配置阶段 ======================
      - name: "⚙️ Configure Kernel Options | 配置内核选项"
        run: |
          echo "⚙️ 正在配置内核编译选项..."
          cd kernel_workspace/kernel_platform
          
          # SU方案配置
          if [[ "${{ github.event.inputs.SU_SOLUTION }}" != "None" ]]; then
            echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
            
            if [[ "${{ github.event.inputs.SU_SOLUTION }}" == "SKSU" ]]; then
              echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
            else
              echo "CONFIG_KSU_WITH_KPROBES=${{ github.event.inputs.KPM_ENABLED && 'y' || 'n' }}" >> ./common/arch/arm64/configs/gki_defconfig
            fi
          fi
          
          # SUSFS配置
          if ${{ github.event.inputs.SUSFS_ENABLED && github.event.inputs.SU_SOLUTION != 'None' }}; then
            echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          
          # 压缩算法配置
          if ${{ github.event.inputs.LZ4KD_ENABLED }}; then
            echo "📦 启用lz4kd压缩..."
            echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4K_OPLUS=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_ZRAM_WRITEBACK=y" >> ./common/arch/arm64/configs/gki_defconfig
          elif [[ "${{ github.event.inputs.KERNEL_VERSION }}" == "6.1" || "${{ github.event.inputs.KERNEL_VERSION }}" == "6.6" ]]; then
            echo "📦 为6.1+内核启用lz4+zstd优化..."
            cp ../../kernel_patches/zram/001-lz4.patch ./common/
            cp ../../kernel_patches/zram/lz4armv8.S ./common/lib
            cp ../../kernel_patches/zram/002-zstd.patch ./common/
          fi
          
          # 网络配置
          if ${{ github.event.inputs.BBR_ENABLED }}; then
            echo "🌐 启用BBR网络算法..."
            echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          
          if ${{ github.event.inputs.PROXY_ENABLED }}; then
            echo "🌐 启用代理优化..."
            echo "CONFIG_BPF_STREAM_PARSER=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NETFILTER_XT_SET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP6_NF_NAT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP6_NF_TARGET_MASQUERADE=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          
          # 优化配置
          if [[ "${{ github.event.inputs.KERNEL_VERSION }}" == "6.1" || "${{ github.event.inputs.KERNEL_VERSION }}" == "6.6" ]]; then
            echo "📦 为6.1+内核启用O2优化..."
            echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> ./common/arch/arm64/configs/gki_defconfig
          elif [[ "${{ github.event.inputs.KERNEL_VERSION }}" == "5.10" || "${{ github.event.inputs.KERNEL_VERSION }}" == "5.15" ]]; then
            echo "📦 为5.10/5.15内核配置LTO..."
            DEFCONFIG=./common/arch/arm64/configs/gki_defconfig
            sed -i 's/^CONFIG_LTO=n/CONFIG_LTO=y/' "$DEFCONFIG"
            sed -i 's/^CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' "$DEFCONFIG"
            sed -i 's/^CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' "$DEFCONFIG"
            grep -q '^CONFIG_LTO_CLANG_THIN=y' "$DEFCONFIG" || echo 'CONFIG_LTO_CLANG_THIN=y' >> "$DEFCONFIG"
          fi
          
          # 移除defconfig检查
          sed -i 's/check_defconfig//' ./common/build.config.gki
          echo "✅ 内核配置更新完成"

      # ====================== 内核编译阶段 ======================
      - name: "🔨 Build Kernel | 编译内核"
        run: |
          echo "🏗️ 开始内核编译..."
          cd kernel_workspace
          
          # 设置编译环境变量
          export KBUILD_BUILD_TIMESTAMP="Wed May 29 07:25:40 UTC 2025"
          export KBUILD_BUILD_VERSION=1
          export PATH="/usr/lib/ccache:$PATH"
          
          # 根据内核版本设置工具链路径
          case "${{ github.event.inputs.KERNEL_VERSION }}" in
            "6.1"|"6.6")
              export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r487747c/bin:$PATH"
              ;;
            "5.15")
              export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r450784e/bin:$PATH"
              ;;
            "5.10")
              export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts-master/clang/host/linux-x86/clang-r416183b/bin:$PATH"
              ;;
          esac
          
          # 执行编译
          if [[ "${{ github.event.inputs.CPU }}" == "sm8650" ]]; then
            ./kernel_platform/build_with_bazel.py -t ${{ github.event.inputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}
          else
            LTO=thin ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ github.event.inputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}
          fi
          
          # 显示ccache统计信息
          ccache -s
          echo "✅ 内核编译完成"

      # ====================== 产物处理阶段 ======================
      - name: "📦 Prepare Output | 准备输出产物"
        run: |
          echo "📦 准备输出产物..."
          
          # 创建输出目录
          mkdir -p output
          
          # 查找内核镜像
          IMAGE_PATH=$(find "./kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/dist/" -name "Image" | head -n 1)
          if [ -z "$IMAGE_PATH" ]; then
            IMAGE_PATH=$(find "./kernel_workspace/kernel_platform/common/out/arch/arm64/boot/" -name "Image" | head -n 1)
          fi
          
          if [ -z "$IMAGE_PATH" ]; then
            echo "❌ 未找到内核镜像文件"
            exit 1
          fi
          
          # 根据输出格式处理产物
          case "${{ github.event.inputs.OUTPUT_FORMAT }}" in
            "AnyKernel3")
              echo "📦 准备AnyKernel3打包环境..."
              git clone https://github.com/osm0sis/AnyKernel3 --depth=1
              rm -rf ./AnyKernel3/.git
              cp "$IMAGE_PATH" ./AnyKernel3/Image
              
              # 复制设备树文件
              mkdir -p ./AnyKernel3/dtb
              find "./kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/dist/" -name "*.dtb" -exec cp {} ./AnyKernel3/dtb/ \;
              
              # 创建基本的anykernel.sh脚本
              cat > ./AnyKernel3/anykernel.sh <<EOF
              #!/bin/bash

              ## AnyKernel setup
              kernel.string=Custom Kernel for ${{ github.event.inputs.FEIL }}
              do.devicecheck=1
              do.modules=0
              do.systemless=1
              do.cleanup=1

              ## AnyKernel install
              dump_boot
              patch_cmdline
              write_boot
              EOF
              chmod +x ./AnyKernel3/anykernel.sh
              
              # 移动AnyKernel3到输出目录
              mv AnyKernel3 output/
              ;;
              
            "boot_img")
              echo "📦 准备boot.img打包..."
              # 这里需要添加boot.img打包逻辑
              # 暂时复制原始镜像到输出目录
              cp "$IMAGE_PATH" output/boot.img
              ;;
              
            "raw_image")
              echo "📦 准备原始镜像..."
              cp "$IMAGE_PATH" output/Image
              ;;
          esac
          
          # 如果需要，查找并复制内核模块
          if ${{ github.event.inputs.UPLOAD_ZRAM_KO }} || ${{ github.event.inputs.UPLOAD_CRYPTO_ZSTD_KO }}; then
            mkdir -p output/modules
            
            if ${{ github.event.inputs.UPLOAD_ZRAM_KO }}; then
              ZRAM_KO_PATH=$(find "./kernel_workspace/kernel_platform/common/out/" -name "zram.ko" | head -n 1)
              if [ -n "$ZRAM_KO_PATH" ]; then
                cp "$ZRAM_KO_PATH" output/modules/
              fi
            fi
            
            if ${{ github.event.inputs.UPLOAD_CRYPTO_ZSTD_KO }}; then
              CRYPTO_ZSTD_KO_PATH=$(find "./kernel_workspace/kernel_platform/common/out/" -name "crypto_zstd.ko" | head -n 1)
              if [ -n "$CRYPTO_ZSTD_KO_PATH" ]; then
                cp "$CRYPTO_ZSTD_KO_PATH" output/modules/
              fi
            fi
          fi
          
          echo "✅ 输出产物准备完成"

      # ====================== KPM修补阶段 ======================
      - name: "🧩 Patch Kernel Image (KPM) | KPM修补镜像"
        if: ${{ github.event.inputs.KPM_ENABLED && github.event.inputs.SU_SOLUTION != 'None' }}
        run: |
          echo "🔧 正在应用KPM补丁..."
          cd output
          
          if [[ "${{ github.event.inputs.OUTPUT_FORMAT }}" == "AnyKernel3" ]]; then
            cd AnyKernel3
            KERNEL_IMAGE=Image
          else
            KERNEL_IMAGE=../${{ github.event.inputs.OUTPUT_FORMAT == 'boot_img' && 'boot.img' || 'Image' }}
          fi
          
          curl -LO https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
          chmod +x patch_linux
          ./patch_linux "$KERNEL_IMAGE"
          rm -f "$KERNEL_IMAGE"
          mv oImage "$KERNEL_IMAGE"
          
          echo "✅ KPM补丁应用完成"

      # ====================== 打包阶段 ======================
      - name: "📦 Package All Artifacts | 打包所有产物"
        if: ${{ github.event.inputs.PACKAGE_ALL }}
        run: |
          echo "📦 正在打包所有产物..."
          cd output
          
          # 创建打包文件名
          PKG_NAME="Kernel_${{ github.event.inputs.FEIL }}"
          PKG_NAME+="_${{ github.event.inputs.SU_SOLUTION != 'None' && github.event.inputs.SU_SOLUTION || 'NoSU' }}"
          PKG_NAME+="_${{ github.event.inputs.KERNEL_VERSION }}"
          PKG_NAME+="_${{ github.event.inputs.ANDROID_VERSION }}"
          PKG_NAME+=".zip"
          
          # 打包所有文件，使用压缩级别7
          zip -q -r7 "../$PKG_NAME" ./*
          mv "../$PKG_NAME" ./
          
          echo "✅ 打包完成: $PKG_NAME"

      # ====================== 上传阶段 ======================
      - name: "📤 Upload Artifacts | 上传产物"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.FEIL }}_${{ github.event.inputs.SU_SOLUTION != 'None' && github.event.inputs.SU_SOLUTION || 'NoSU' }}_${{ github.event.inputs.KERNEL_VERSION }}
          path: |
            output/*
          retention-days: 7

      - name: "📦 Package Release | 打包发布"
        run: |
          echo "📦 准备发布包..."
          
          # 创建发布目录
          mkdir -p release
          cd release
          
          # 复制AnyKernel3
          cp -r ../output/AnyKernel3 ./
          
          # 复制内核模块(如果存在)
          if [ -d "../output/modules" ]; then
            cp -r ../output/modules ./
          fi
          
          # 收集系统信息
          {
            echo "# Build Information"
            echo "- Date: $(date)"
            echo "- Host: $(uname -a)"
            echo "- Compiler: $(clang --version | head -n 1)"
            echo "- Architecture: $(uname -m)"
            ccache -s
          } > system_info.txt
          
          # 复制编译日志(如果存在)
          if [ -f "../kernel_workspace/build.log" ]; then
            cp ../kernel_workspace/build.log ./
          fi
          
          # 创建ZIP包
          ZIP_NAME="kernel_${{ github.event.inputs.MODEL }}_${{ github.event.inputs.PLATFORM }}_${{ github.event.inputs.KERNEL_VERSION }}"
          ZIP_NAME+="_${{ github.event.inputs.SU_SOLUTION != 'None' && github.event.inputs.SU_SOLUTION || 'NoSU' }}"
          ZIP_NAME+=".zip"
          
          zip -r "../$ZIP_NAME" ./*
          mv "../$ZIP_NAME" ./
          
          echo "✅ 发布包准备完成: $ZIP_NAME"
          cd ..

      - name: "📤 Upload Release Package | 上传发布包" 
        uses: actions/upload-artifact@v4
        with:
          name: kernel_release
          path: release/*
          retention-days: 7

      - name: 📊 Post-build disk check (构建后空间检查)
        run: df -h
